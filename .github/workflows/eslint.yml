name: Eslint

on: pull_request

permissions:
  contents: read
  pull-requests: write  # ✅ PR 코멘트 작성 권한 추가

jobs:
  eslint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci

      - name: Install reviewdog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b /usr/local/bin

      - name: Debug ESLint Execution
        run: |
          echo "📌 Checking ESLint Config File..."
          ls -la eslint.config.js || echo "eslint.config.js 파일이 없음"
          
          echo "📌 Checking TypeScript Config File..."
          ls -la tsconfig.app.json || echo "tsconfig.app.json 파일이 없음"
          
          echo "📌 Running ESLint with Debug Mode..."
          npx eslint . --config eslint.config.js --debug || echo "❌ ESLint 실행 실패"

      - name: Run ESLint and report with reviewdog
        run: |
          # ✅ ESLint 실행 (코드 스타일 + 보안 검사 포함)
          npx eslint . --config eslint.config.js --format=json > eslint-report.json || true

          echo "📌 ESLint JSON Output:"
          cat eslint-report.json  # ✅ JSON 결과 출력

          # ✅ messages가 비어 있지 않은 경우만 필터링
          cat eslint-report.json | jq -c '.[] | select(.messages != []) | {filePath, messages}' > eslint-compact.json
          
          echo "📌 Processed ESLint Output:"
          cat eslint-compact.json  # ✅ 변환된 JSON 결과 출력

          # ✅ reviewdog을 사용해 PR에 코멘트 추가
          cat eslint-compact.json | reviewdog -efm="%f: %l:%c: %m" -name="ESLint" -reporter=github-pr-review -level=error

          # ❌ ESLint 오류가 있는 경우만 CI 실패 처리
          if [ -s eslint-compact.json ]; then
            echo "❌ ESLint 오류가 발견되었습니다. CI 실패"
            exit 1
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post Security Issues as PR Comment
        if: always()  # ✅ ESLint 검사 후 항상 실행
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request?.number;

            if (!prNumber) {
              console.log("PR이 아닙니다. 코멘트를 추가하지 않습니다.");
              return;
            }

            const fs = require("fs");
            const securityReport = JSON.parse(fs.readFileSync("eslint-compact.json", "utf8"));
            const securityIssues = securityReport.filter(file => file.messages.length > 0);

            if (securityIssues.length > 0) {
              let message = `🚨 **ESLint Security 분석 결과** 🚨\n\n`;
              message += `⚠️ **${securityIssues.length}개의 보안 취약점**이 감지되었습니다.\n`;
              message += `🔍 자세한 내용은 GitHub Actions 로그에서 확인하세요.\n\n`;

              for (const issue of securityIssues.slice(0, 5)) {  // 최대 5개까지만 표시
                const filePath = issue.filePath.replace('/home/runner/work/', '');
                const firstMessage = issue.messages[0];
                message += `- **${firstMessage.ruleId || "보안 문제"}** (파일: \`${filePath}\`): ${firstMessage.message}\n`;
              }

              await github.pulls.createReview({
                owner,
                repo,
                pull_number: prNumber,
                event: "COMMENT",
                body: message
              });

              console.log("🚀 PR에 보안 취약점 경고 코멘트를 추가했습니다.");
            } else {
              console.log("✅ 보안 취약점 없음. PR 코멘트 생략.");
            }
