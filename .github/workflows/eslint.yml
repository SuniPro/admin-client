name: Eslint

on: pull_request

permissions:
  contents: read
  pull-requests: write  # ✅ PR 코멘트 작성 권한 추가

jobs:
  eslint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci

      - name: Install reviewdog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b /usr/local/bin

      - name: Debug ESLint Execution
        run: |
          echo "📌 Checking ESLint Config File..."
          ls -la eslint.config.js || echo "eslint.config.js 파일이 없음"
          
          echo "📌 Checking TypeScript Config File..."
          ls -la tsconfig.app.json || echo "tsconfig.app.json 파일이 없음"
          
          echo "📌 Running ESLint with Debug Mode..."
          npx eslint . --config eslint.config.js --debug || echo "❌ ESLint 실행 실패"
          
          echo "📌 Checking eslint-compact.json..."
          if [ -s eslint-compact.json ]; then
            cat eslint-compact.json
          else
            echo "⚠️ eslint-compact.json 파일이 비어 있습니다."
          fi

      - name: Post Security Issues as PR Comment
        if: always()  # ✅ ESLint 검사 후 항상 실행
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request?.number;

            if (!prNumber) {
              console.log("PR이 아닙니다. 코멘트를 추가하지 않습니다.");
              return;
            }

            const fs = require("fs");

            // ✅ eslint-compact.json이 존재하지 않거나 비어 있는 경우 대비
            let securityReport = [];
            try {
              const fileContent = fs.readFileSync("eslint-compact.json", "utf8").trim();
              if (fileContent) {
                securityReport = JSON.parse(fileContent);
              } else {
                console.log("⚠️ eslint-compact.json 파일이 비어 있습니다.");
              }
            } catch (error) {
              console.error("❌ eslint-compact.json을 읽는 중 오류 발생:", error);
            }

            // 보안 취약점이 있는 파일만 필터링
            const securityIssues = securityReport.filter(file => file.messages && file.messages.length > 0);

            if (securityIssues.length > 0) {
              let message = `🚨 **ESLint Security 분석 결과** 🚨\n\n`;
              message += `⚠️ **${securityIssues.length}개의 보안 취약점**이 감지되었습니다.\n`;
              message += `🔍 자세한 내용은 GitHub Actions 로그에서 확인하세요.\n\n`;

              for (const issue of securityIssues.slice(0, 5)) {  // 최대 5개까지만 표시
                const filePath = issue.filePath.replace('/home/runner/work/', '');
                const firstMessage = issue.messages[0];
                message += `- **${firstMessage.ruleId || "보안 문제"}** (파일: \`${filePath}\`): ${firstMessage.message}\n`;
              }

              await github.pulls.createReview({
                owner,
                repo,
                pull_number: prNumber,
                event: "COMMENT",
                body: message
              });

              console.log("🚀 PR에 보안 취약점 경고 코멘트를 추가했습니다.");
            } else {
              console.log("✅ 보안 취약점 없음. PR 코멘트 생략.");
            }
